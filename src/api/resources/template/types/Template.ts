/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Fern from "../../..";

export type Template =
    | Fern.Template.Generic
    | Fern.Template.Enum
    | Fern.Template.DiscriminatedUnion
    | Fern.Template.Union
    | Fern.Template.Dict
    | Fern.Template.Iterable;

export declare namespace Template {
    interface Generic extends Fern.GenericTemplate, _Utils {
        type: "generic";
    }

    interface Enum extends Fern.EnumTemplate, _Utils {
        type: "enum";
    }

    interface DiscriminatedUnion extends Fern.DiscriminatedUnionTemplate, _Utils {
        type: "discriminatedUnion";
    }

    interface Union extends Fern.UnionTemplate, _Utils {
        type: "union";
    }

    interface Dict extends Fern.DictTemplate, _Utils {
        type: "dict";
    }

    interface Iterable extends Fern.IterableTemplate, _Utils {
        type: "iterable";
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fern.Template._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        generic: (value: Fern.GenericTemplate) => _Result;
        enum: (value: Fern.EnumTemplate) => _Result;
        discriminatedUnion: (value: Fern.DiscriminatedUnionTemplate) => _Result;
        union: (value: Fern.UnionTemplate) => _Result;
        dict: (value: Fern.DictTemplate) => _Result;
        iterable: (value: Fern.IterableTemplate) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Template = {
    generic: (value: Fern.GenericTemplate): Fern.Template.Generic => {
        return {
            ...value,
            type: "generic",
            _visit: function <_Result>(this: Fern.Template.Generic, visitor: Fern.Template._Visitor<_Result>) {
                return Fern.Template._visit(this, visitor);
            },
        };
    },

    enum: (value: Fern.EnumTemplate): Fern.Template.Enum => {
        return {
            ...value,
            type: "enum",
            _visit: function <_Result>(this: Fern.Template.Enum, visitor: Fern.Template._Visitor<_Result>) {
                return Fern.Template._visit(this, visitor);
            },
        };
    },

    discriminatedUnion: (value: Fern.DiscriminatedUnionTemplate): Fern.Template.DiscriminatedUnion => {
        return {
            ...value,
            type: "discriminatedUnion",
            _visit: function <_Result>(
                this: Fern.Template.DiscriminatedUnion,
                visitor: Fern.Template._Visitor<_Result>
            ) {
                return Fern.Template._visit(this, visitor);
            },
        };
    },

    union: (value: Fern.UnionTemplate): Fern.Template.Union => {
        return {
            ...value,
            type: "union",
            _visit: function <_Result>(this: Fern.Template.Union, visitor: Fern.Template._Visitor<_Result>) {
                return Fern.Template._visit(this, visitor);
            },
        };
    },

    dict: (value: Fern.DictTemplate): Fern.Template.Dict => {
        return {
            ...value,
            type: "dict",
            _visit: function <_Result>(this: Fern.Template.Dict, visitor: Fern.Template._Visitor<_Result>) {
                return Fern.Template._visit(this, visitor);
            },
        };
    },

    iterable: (value: Fern.IterableTemplate): Fern.Template.Iterable => {
        return {
            ...value,
            type: "iterable",
            _visit: function <_Result>(this: Fern.Template.Iterable, visitor: Fern.Template._Visitor<_Result>) {
                return Fern.Template._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: Fern.Template, visitor: Fern.Template._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "generic":
                return visitor.generic(value);
            case "enum":
                return visitor.enum(value);
            case "discriminatedUnion":
                return visitor.discriminatedUnion(value);
            case "union":
                return visitor.union(value);
            case "dict":
                return visitor.dict(value);
            case "iterable":
                return visitor.iterable(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
