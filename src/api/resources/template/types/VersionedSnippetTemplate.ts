/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Fern from "../../..";

export type VersionedSnippetTemplate = Fern.VersionedSnippetTemplate.V1;

export declare namespace VersionedSnippetTemplate {
    interface V1 extends Fern.SnippetTemplate, _Utils {
        type: "v1";
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fern.VersionedSnippetTemplate._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        v1: (value: Fern.SnippetTemplate) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const VersionedSnippetTemplate = {
    v1: (value: Fern.SnippetTemplate): Fern.VersionedSnippetTemplate.V1 => {
        return {
            ...value,
            type: "v1",
            _visit: function <_Result>(
                this: Fern.VersionedSnippetTemplate.V1,
                visitor: Fern.VersionedSnippetTemplate._Visitor<_Result>
            ) {
                return Fern.VersionedSnippetTemplate._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: Fern.VersionedSnippetTemplate,
        visitor: Fern.VersionedSnippetTemplate._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "v1":
                return visitor.v1(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
