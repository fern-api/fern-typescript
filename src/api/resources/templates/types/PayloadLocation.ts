/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * The location of the payload, if omitted the full payload is used.
 * Note that RELATIVE should be used for iterables primarily, so be
 * able to specify the path to the field relative to the iterated on object
 */
export type PayloadLocation = "BODY" | "QUERY" | "PATH" | "HEADERS" | "RELATIVE";

export const PayloadLocation = {
    Body: "BODY",
    Query: "QUERY",
    Path: "PATH",
    Headers: "HEADERS",
    Relative: "RELATIVE",
    _visit: <R>(value: PayloadLocation, visitor: PayloadLocation.Visitor<R>) => {
        switch (value) {
            case PayloadLocation.Body:
                return visitor.body();
            case PayloadLocation.Query:
                return visitor.query();
            case PayloadLocation.Path:
                return visitor.path();
            case PayloadLocation.Headers:
                return visitor.headers();
            case PayloadLocation.Relative:
                return visitor.relative();
            default:
                return visitor._other();
        }
    },
} as const;

export declare namespace PayloadLocation {
    interface Visitor<R> {
        body: () => R;
        query: () => R;
        path: () => R;
        headers: () => R;
        relative: () => R;
        _other: () => R;
    }
}
