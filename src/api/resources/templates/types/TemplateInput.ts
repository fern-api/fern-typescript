/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Fern from "../../..";

export type TemplateInput = Fern.TemplateInput.Template | Fern.TemplateInput.Payload;

export declare namespace TemplateInput {
    interface Template extends _Utils {
        type: "template";
        value: Fern.Template;
    }

    interface Payload extends Fern.PayloadInput, _Utils {
        type: "payload";
    }

    interface _Utils {
        _visit: <_Result>(visitor: Fern.TemplateInput._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        template: (value: Fern.Template) => _Result;
        payload: (value: Fern.PayloadInput) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const TemplateInput = {
    template: (value: Fern.Template): Fern.TemplateInput.Template => {
        return {
            value: value,
            type: "template",
            _visit: function <_Result>(
                this: Fern.TemplateInput.Template,
                visitor: Fern.TemplateInput._Visitor<_Result>
            ) {
                return Fern.TemplateInput._visit(this, visitor);
            },
        };
    },

    payload: (value: Fern.PayloadInput): Fern.TemplateInput.Payload => {
        return {
            ...value,
            type: "payload",
            _visit: function <_Result>(
                this: Fern.TemplateInput.Payload,
                visitor: Fern.TemplateInput._Visitor<_Result>
            ) {
                return Fern.TemplateInput._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: Fern.TemplateInput, visitor: Fern.TemplateInput._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "template":
                return visitor.template(value.value);
            case "payload":
                return visitor.payload(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
