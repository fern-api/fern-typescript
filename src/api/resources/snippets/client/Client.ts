/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Fern from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as errors from "../../../../errors";
import { default as URLSearchParams } from "@ungap/url-search-params";

export declare namespace Snippets {
    interface Options {
        environment?: core.Supplier<environments.FernEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}

export class Snippets {
    constructor(protected readonly _options: Snippets.Options) {}

    /**
     * Get snippet by endpoint method and path
     * @throws {@link Fern.snippets.EndpointNotFound}
     * @throws {@link Fern.snippets.SdkNotFound}
     * @throws {@link Fern.snippets.ApiIdNotFound}
     */
    public async get(
        request: Fern.snippets.GetSnippetRequest,
        requestOptions?: Snippets.RequestOptions
    ): Promise<Fern.snippets.Snippet[]> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernEnvironment.Production,
                "/snippets"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/node-sdk",
                "X-Fern-SDK-Version": "0.0.1",
            },
            contentType: "application/json",
            body: await serializers.snippets.GetSnippetRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.snippets.get.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.["error"]) {
                case "EndpointNotFound":
                    throw new Fern.snippets.EndpointNotFound();
                case "SDKNotFound":
                    throw new Fern.snippets.SdkNotFound();
                case "ApiIdNotFound":
                    throw new Fern.snippets.ApiIdNotFound();
                default:
                    throw new errors.FernError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernTimeoutError();
            case "unknown":
                throw new errors.FernError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async load(
        request: Fern.snippets.ListSnippetsRequest = {},
        requestOptions?: Snippets.RequestOptions
    ): Promise<Fern.snippets.SnippetsPage> {
        const { page, ..._body } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernEnvironment.Production,
                "/snippets/load"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/node-sdk",
                "X-Fern-SDK-Version": "0.0.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            body: await serializers.snippets.ListSnippetsRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.snippets.SnippetsPage.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FernError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernTimeoutError();
            case "unknown":
                throw new errors.FernError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
