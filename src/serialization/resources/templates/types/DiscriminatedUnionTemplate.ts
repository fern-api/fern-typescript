/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Fern from "../../../../api";
import * as core from "../../../../core";
import { PayloadInput } from "./PayloadInput";

export const DiscriminatedUnionTemplate: core.serialization.ObjectSchema<
    serializers.DiscriminatedUnionTemplate.Raw,
    Fern.DiscriminatedUnionTemplate
> = core.serialization.object({
    imports: core.serialization.list(core.serialization.string()).optional(),
    isOptional: core.serialization.boolean(),
    templateString: core.serialization.string(),
    discriminantField: core.serialization.string(),
    members: core.serialization.record(
        core.serialization.string(),
        core.serialization.lazy(async () => (await import("../../..")).Template)
    ),
    templateInput: PayloadInput.optional(),
});

export declare namespace DiscriminatedUnionTemplate {
    interface Raw {
        imports?: string[] | null;
        isOptional: boolean;
        templateString: string;
        discriminantField: string;
        members: Record<string, serializers.Template.Raw>;
        templateInput?: PayloadInput.Raw | null;
    }
}
