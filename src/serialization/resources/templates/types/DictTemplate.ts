/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Fern from "../../../../api";
import * as core from "../../../../core";
import { PayloadInput } from "./PayloadInput";

export const DictTemplate: core.serialization.ObjectSchema<serializers.DictTemplate.Raw, Fern.DictTemplate> =
    core.serialization.object({
        imports: core.serialization.list(core.serialization.string()).optional(),
        isOptional: core.serialization.boolean(),
        containerTemplateString: core.serialization.string(),
        delimiter: core.serialization.string(),
        keyTemplate: core.serialization.lazy(async () => (await import("../../..")).Template),
        valueTemplate: core.serialization.lazy(async () => (await import("../../..")).Template),
        keyValueSeparator: core.serialization.string(),
        templateInput: PayloadInput.optional(),
    });

export declare namespace DictTemplate {
    interface Raw {
        imports?: string[] | null;
        isOptional: boolean;
        containerTemplateString: string;
        delimiter: string;
        keyTemplate: serializers.Template.Raw;
        valueTemplate: serializers.Template.Raw;
        keyValueSeparator: string;
        templateInput?: PayloadInput.Raw | null;
    }
}
