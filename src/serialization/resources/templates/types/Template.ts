/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Fern from "../../../../api";
import * as core from "../../../../core";
import { EnumTemplate } from "./EnumTemplate";

export const Template: core.serialization.Schema<serializers.Template.Raw, Fern.Template> = core.serialization
    .union("type", {
        generic: core.serialization.lazyObject(async () => (await import("../../..")).GenericTemplate),
        enum: EnumTemplate,
        discriminatedUnion: core.serialization.lazyObject(
            async () => (await import("../../..")).DiscriminatedUnionTemplate
        ),
        union: core.serialization.lazyObject(async () => (await import("../../..")).UnionTemplate),
        dict: core.serialization.lazyObject(async () => (await import("../../..")).DictTemplate),
        iterable: core.serialization.lazyObject(async () => (await import("../../..")).IterableTemplate),
    })
    .transform<Fern.Template>({
        transform: (value) => {
            switch (value.type) {
                case "generic":
                    return Fern.Template.generic(value);
                case "enum":
                    return Fern.Template.enum(value);
                case "discriminatedUnion":
                    return Fern.Template.discriminatedUnion(value);
                case "union":
                    return Fern.Template.union(value);
                case "dict":
                    return Fern.Template.dict(value);
                case "iterable":
                    return Fern.Template.iterable(value);
                default:
                    return value as Fern.Template;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Template {
    type Raw =
        | Template.Generic
        | Template.Enum
        | Template.DiscriminatedUnion
        | Template.Union
        | Template.Dict
        | Template.Iterable;

    interface Generic extends serializers.GenericTemplate.Raw {
        type: "generic";
    }

    interface Enum extends EnumTemplate.Raw {
        type: "enum";
    }

    interface DiscriminatedUnion extends serializers.DiscriminatedUnionTemplate.Raw {
        type: "discriminatedUnion";
    }

    interface Union extends serializers.UnionTemplate.Raw {
        type: "union";
    }

    interface Dict extends serializers.DictTemplate.Raw {
        type: "dict";
    }

    interface Iterable extends serializers.IterableTemplate.Raw {
        type: "iterable";
    }
}
