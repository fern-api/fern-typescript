/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernInternal from "../src/api/index";
import { FernInternalClient } from "../src/Client";

const client = new FernInternalClient({
    environment: process.env.TESTS_BASE_URL || "test",
    token: process.env.TESTS_AUTH || "test",
});

describe("Snippets", () => {
    test("get", async () => {
        const response = await client.snippets.get({
            endpoint: {
                method: FernInternal.EndpointMethod.Get,
                path: "/v1/search",
            },
        });
        expect(response).toEqual([
            {
                type: "python",
                sdk: { package: "vellum-ai", version: "1.2.1" },
                sync_client:
                    'import Vellum from vellum.client\n\nclient = Vellum(api_key="YOUR_API_KEY")\nclient.search(query="Find documents written in the last 5 days")\n',
                async_client:
                    'import VellumAsync from vellum.client\n\nclient = VellumAsync(api_key="YOUR_API_KEY")\nawait client.search(query="Find documents written in the last 5 days")\n',
            },
            {
                type: "typescript",
                sdk: { package: "vellum-ai", version: "1.2.1" },
                client: 'import { VellumClient } from "vellum-ai";\n\nconst vellum = VellumClient({\n  apiKey="YOUR_API_KEY"\n})\nvellum.search({\n  query: "Find documents written in the last 5 days"\n})\n',
            },
        ]);
    });

    test("load", async () => {
        const response = await client.snippets.load({
            page: 1,
            orgId: "vellum",
            apiId: "vellum-ai",
            sdks: [
                {
                    type: "python",
                    package: "vellum-ai",
                    version: "1.2.1",
                },
            ],
        });
        expect(response).toEqual({
            next: 2,
            snippets: {
                "/v1/search": {
                    GET: [
                        {
                            type: "python",
                            sdk: { package: "vellum-ai", version: "1.2.1" },
                            sync_client:
                                'import Vellum from vellum.client\n\nclient = Vellum(api_key="YOUR_API_KEY")\nclient.search(query="Find documents written in the last 5 days")\n',
                            async_client:
                                'import Vellum from vellum.client\n\nclient = Vellum(api_key="YOUR_API_KEY")\nclient.search(query="Find documents written in the last 5 days")\n',
                        },
                        {
                            type: "typescript",
                            sdk: { package: "vellum-ai", version: "1.2.1" },
                            client: 'import { VellumClient } from "vellum-ai";\n\nconst vellum = VellumClient({\n  apiKey="YOUR_API_KEY"\n})\nvellum.search({\n  query: "Find documents written in the last 5 days"\n})\n',
                        },
                    ],
                },
                "v1/document-indexes": {
                    POST: [
                        {
                            type: "python",
                            sdk: { package: "vellum-ai", version: "1.2.1" },
                            sync_client:
                                'import Vellum from vellum.client\n\nclient = Vellum(api_key="YOUR_API_KEY")\nclient.document_indexes.create(name="meeting-reports", status="ACTIVE")\n',
                            async_client:
                                'import VellumAsync from vellum.client\n\nclient = VellumAsync(api_key="YOUR_API_KEY")\nawait client.document_indexes.create(name="meeting-reports", status="ACTIVE")\n',
                        },
                        {
                            type: "typescript",
                            sdk: { package: "vellum-ai", version: "1.2.1" },
                            client: 'import { VellumClient } from "vellum-ai";\n\nconst vellum = VellumClient({\n  apiKey="YOUR_API_KEY"\n})\nvellum.documentIndexes.create({\n  name: "meeting-reports",\n  status: "ACTIVE"\n})\n',
                        },
                    ],
                },
            },
        });
    });
});
